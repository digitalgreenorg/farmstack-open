<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd">

    <camel:sslContextParameters id="serverSslContext" certAlias="1.0.1">
        <camel:keyManagers keyPassword="password">
            <camel:keyStore resource="etc/provider-keystore.p12" password="password"/>
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore resource="etc/truststore.p12" password="password"/>
        </camel:trustManagers>
    </camel:sslContextParameters>



    <bean id="ArtifactRequestProcessor" class="de.fhg.aisec.ids.camel.idscp2.processors.ArtifactRequestProcessor" />
    <bean id="ContractRequestProcessor" class="de.fhg.aisec.ids.camel.idscp2.processors.ContractRequestProcessor"/>
    <bean id="ContractAgreementReceiverProcessor" class="de.fhg.aisec.ids.camel.idscp2.processors.ContractAgreementReceiverProcessor"/>
    <bean id="TypeExtractionProcessor" class="de.fhg.aisec.ids.camel.idscp2.processors.IdsMessageTypeExtractionProcessor" />

    <!-- The following defines a single bean called ResourceUpdateCreationProcessor implemented by the POJO de.fhg.aisec.ids.camel.idscp2.processors.ResourceUpdateCreationProcessor -->
    <bean id="ResourceUpdateCreationProcessor" class="de.fhg.aisec.ids.camel.idscp2.processors.ResourceUpdateCreationProcessor" />

    <camelContext xmlns="http://camel.apache.org/schema/spring">
          <restConfiguration component="jetty" port="8988" enableCORS="true">
            <corsHeaders key="Access-Control-Allow-Origin" value="*"/>
            <corsHeaders key="Access-Control-Allow-Headers" value="Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers"/>
            <corsHeaders key="Access-Control-Allow-Methods" value="GET,PUT,POST,HEAD,OPTIONS"/>
          </restConfiguration>

<!--         <rest path="/farmos">-->
<!--            <post uri="/response">-->
<!--                <to uri="direct:sendFarmOSReportData"/>-->
<!--            </post>-->
<!--        </rest>-->

        <route id="server">
            <from uri="idscp2server://0.0.0.0:29291?sslContextParameters=#serverSslContext&amp;useIdsMessages=true&amp;tlsClientHostnameVerification=false"/>
            <process ref="TypeExtractionProcessor"/>
            <log message="### Inside server ${headers}###"/>
            <choice>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'ContractRequestMessage'</simple>
                    <log message="### Handle ContractRequestMessage ###"/>
                    <setProperty name="containerUri">
                        <constant>
                            https://hub.docker.com/layers/164595253/farmstack/farmos-consumer/restapi/images/sha256-cd48394df51115aaa4047850653599c959113bd4368cd72c2826fec8552b356d#5003
                        </constant>
                    </setProperty>
                    <process ref="ContractRequestProcessor"/>
                </when>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'ContractAgreementMessage'</simple>
                    <log message="### Handle ContractAgreementMessage ###"/>
                    <!-- Only processing of incoming request must be performed, no reply -->
                    <process ref="ContractAgreementReceiverProcessor"/>
                    <removeHeader headerName="idscp2-header" />
                    <setBody><simple>${null}</simple></setBody>
                </when>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'ArtifactRequestMessage'</simple>
                    <log message="### Handle ArtifactRequestMessage ###"/>
                    <process ref="ArtifactRequestProcessor" />
                    <to uri="direct:sendFarmOsData"/>
                </when>
                <otherwise>
                    <log loggingLevel="ERROR" message="### Server received unexpected message in server route :8989(otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}"/>
                    <removeHeader headerName="idscp2-header" />
                    <setBody><simple>${null}</simple></setBody>
                </otherwise>
            </choice>
        </route>

         <route id="sendProviderFarmOsData">
            <from uri="direct:sendFarmOsData"/>
            <!-- ensure that contract agreement is made before sending -->
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/json</constant>
            </setHeader>
             <log message="### Reached Data provider ###"/>


            <to uri="http://farmos-custom-app:5000/farm/data"/>
            <setProperty name="artifactUri">
                <constant>https://farmstack.digitalgreen.org/farmos</constant>
            </setProperty>
          <process ref="ResourceUpdateCreationProcessor" />
        </route>

<!--        <route>-->
<!--            <from uri="direct:sendFarmOSReportData"/>-->

<!--          <setProperty name="artifactUri">-->
<!--                <constant>https://farmstack.digitalgreen.org/farmos</constant>-->
<!--          </setProperty>-->
<!--          &lt;!&ndash; check this &ndash;&gt;-->
<!--          <process ref="ResourceUpdateCreationProcessor" />-->
<!--          <to uri="idscp2client://consumer-core:9001?awaitResponse=true&amp;connectionShareId=ucConnection&amp;sslContextParameters=#serverSslContext&amp;useIdsMessages=true"/>-->
<!--          &lt;!&ndash; Sets the correct header for the text answer "OK" &ndash;&gt;-->
<!--          <setHeader name="Content-Type">-->
<!--            <constant>application/json</constant>-->
<!--          </setHeader>-->
<!--        </route>-->
    </camelContext>

</beans>